# Creator: Anna Nguyen
# Date: 13/03/2023 - 01/04/2023
"""This file has a GUI that takes input, checks whether it's an a 
float, and converts valid inputs to either degrees Celsius or 
Fahrenheit temperature. The 'Info' button to a GUI that shows 
info about the main GUI. The 'History' button to a GUI that shows
past temperature conversions and gives user choice to export the
conversions.
"""

from tkinter import *
from functools import partial
import tkinter.scrolledtext as st
from datetime import date
import re

class Converter:
    """This is the main GUI window that converts temperature and gives 
    access to two other GUIs using buttons
    """

    def __init__(self):

        # Initialising variables (such as feedback variable)
        self.var_feedback = StringVar()
        self.var_feedback.set("")

        self.var_has_error = BooleanVar()
        self.var_has_error.set(False)

        # List to store all conversions from start of programme
        self.all_calculations = []

        # common format for all buttons 
        # Arial size 14 bold, with white text, blue background, 
        # button width 12 char, allround padding 5px
        btn_font = ("Arial 12 bold")
        btn_fg = "#FFFFFF"
        btn_bg = "#008CFF"
        btn_width = "12"
        padx_num = 5
        pady_num = 5

        # set up GUI Frame and non-button components
        self.temp_frame = Frame(padx=10, pady=10)
        self.temp_frame.grid()

        self.temp_heading = Label(self.temp_frame, text="Temperature Converter", font=("Arial 16 bold"))
        self.temp_heading.grid(row=0)

        instructions = "Type in a temperature in the box below, then press one of the two buttons to convert either to Celsius or Fahrenheit. Converted temperatures are rounded to 1 d.p."
        self.temp_instructions = Label(self.temp_frame, text=instructions, wraplength="250", width="40")
        self.temp_instructions.grid(row=1)

        # input is used to convert to temp depending on button pressed
        self.temp_entry = Entry(self.temp_frame, font=("Arial 12"), bg="white")
        self.temp_entry.grid(row=2, padx=10, pady=10)

        self.temp_output = Label(self.temp_frame, font=("Arial 11 bold"), wraplength="300", width="30")
        self.temp_output.grid(row=3)

        # Conversions, help, history / export and quit programme buttons
        self.button_frame = Frame(self.temp_frame)
        self.button_frame.grid(row=4)

        # converts from F to C
        # absolute zero = -459.7 degrees Fahrenheit
        self.to_celsius_button = Button(self.button_frame, text="To ° Celsius", fg=btn_fg, bg=btn_bg, font=btn_font, width=btn_width, command=lambda:self.to_temp(-459.7))
        self.to_celsius_button.grid(row=0, column=0, padx=padx_num, pady=pady_num)

        # converts from C to F
        # absolute zero = -273.2 degrees celsius
        self.to_fahrenheit_button = Button(self.button_frame, text="To ° Fahrenheit", fg=btn_fg, bg=btn_bg, font=btn_font, width=btn_width, command=lambda:self.to_temp(-273.2))
        self.to_fahrenheit_button.grid(row=0, column=1, padx=padx_num, pady=pady_num)

        self.to_info_button = Button(self.button_frame, text="Info", fg=btn_fg, bg=btn_bg, font=btn_font, width=btn_width, command=self.to_info)
        self.to_info_button.grid(row=1, column=0, padx=padx_num, pady=pady_num)

        self.to_history_button = Button(self.button_frame, text="History / Export", fg=btn_fg, bg=btn_bg, font=btn_font, width=btn_width, state=DISABLED, command=self.to_history)
        self.to_history_button.grid(row=1, column=1, padx=padx_num, pady=pady_num)

        self.to_quit_button = Button(self.button_frame, text="Quit Programme", fg=btn_fg, bg=btn_bg, font=btn_font, width=btn_width, command=quit)
        self.to_quit_button.grid(row=2, column=0, columnspan=2, padx=padx_num, pady=pady_num)

    # checks user input and if it's invalid, creates error
    # message and put into var_feedback variable
    # Also saves in var_has_error whether there is error
    def check_temp(self, min_value, tail):
        has_error = False
        error = f"Please enter a number that is minimum {min_value}{tail}"

        # check that user has entered a valid number...
        response = self.temp_entry.get()

        try:
            response = float(response)
            if response < min_value:
                has_error = True

        except ValueError:
            has_error = True

        # Sets var_has_error so that entry box and
        # labels can be correctly formatted by formatting function
        if has_error == True:
            self.var_has_error.set(True)
            self.var_feedback.set(error)
            return "invalid"

        # If we have no errors...
        else:
            # set self.var_has_error to False in case of previous errors
            self.var_has_error.set(False)

            # return number to be converted and
            # enable history button
            self.to_history_button.config(state=NORMAL)
            return response

    # Check temperature is at least min value and
    # convert to either Celsius or Fahrenheit
    def to_temp(self, min_value):
        # determine which conversion based on min value
        if min_value == -459.7:
            temp_tail = "° Fahrenheit"
        elif min_value == -273.2:
            temp_tail = "° Celsius"

        # check temp validity
        to_convert = self.check_temp(min_value, temp_tail)

        if to_convert != "invalid":
            if min_value == -459.7:
                # do calculation from F to C
                to_convert = float(to_convert)
                converted = (to_convert - 32) / 1.8
                message = self.round_1dp(to_convert, converted, temp_tail)

            elif min_value == -273.2:
                # do calculation from C to F
                to_convert = float(to_convert)
                converted = (to_convert * 1.8) + 32
                message = self.round_1dp(to_convert, converted, temp_tail)

            self.var_feedback.set(message)
            self.all_calculations.append(message)
        self.output_answer()

    # Rounds calculation to 1 decimal place and
    # sets output message
    def round_1dp(self, round_to_convert, round_converted, round_from_temp):
        round_to_convert = round(round_to_convert, 1)
        round_converted = round(round_converted, 1)

        # Determine output message with rounded calculations
        if round_from_temp == "° Celsius":
            round_message = f"{round_to_convert}° Celsius = {round_converted}° Fahrenheit"
        elif round_from_temp == "° Fahrenheit":
            round_message = f"{round_to_convert}° Fahrenheit = {round_converted}° Celsius"
        return round_message

    # Shows user output and clears entry widget to be
    # ready for next calculation
    def output_answer(self):
        output = self.var_feedback.get()
        has_errors = self.var_has_error.get()

        if has_errors == True:
            # red text, pink entry box
            self.temp_output.config(fg="#FF0000")
            self.temp_entry.config(bg="#FC9093")

        else:
            # green text, white entry box
            self.temp_output.config(fg="#004C00")
            self.temp_entry.config(bg="#FFFFFF")

        # set GUI output and clear entry box
        self.temp_output.config(text=output)
        self.temp_entry.delete(0, END)

    # opens Info GUI and related functions
    # with main GUI as parameter
    def to_info(self):
        Info(self)

    # opens History GUI and related functions
    # with main GUI as parameter
    def to_history(self):
        History_export(self)

    # Terminate all GUIs
    def quit(self):
        self.destroy()


class Info:
    """This GUI shows information about the main Converter GUI,
    with a dismiss button to close the window. When Info GUI is open, 
    to_info button in Converter is disabled
    """

    def __init__(self, partner):

        # set up Info dialogue box
        self.info_box = Toplevel()
        self.info_box.title("Info")

        # disable info button in Converter GUI
        partner.to_info_button.config(state=DISABLED)

        # If users press cross at top, closes info GUI and 
        # enables info button in main GUI
        self.info_box.protocol("WM_DELETE_WINDOW", partial(self.dismiss_info, partner))

        # set up Info GUI Frame
        self.info_frame = Frame(self.info_box, width=300, height=200)
        self.info_frame.grid()

        self.info_heading = Label(self.info_frame, text="Info", font=("Arial 14 bold"))
        self.info_heading.grid(row=0, padx=5, pady=5)

        instructions = """Temp Converter is a programme where you type in a temperature and press the button you want to convert it to, either to Fahrenheit with <To F> button, or to Celsius with <To C> button. Converted temperatures are rounded to 1 decimal place.

    Note that the lowest temperature possible, known as absolute zero, is at 273.2° Celsius, or 459.7° Fahrenheit. If you try to convert a temperature below this threshold, you will get an error message

    <History / Export> button shows you all your conversions in the past, and you can export all your past conversions into a JSON file by pressing <Export> button. You can also exit the History / Export window using <Dismiss> button.

    Quit button in the main window lets you turn off the programme.

     You can exit this window using <Dismiss> button."""

        self.info_instructions = Label(self.info_frame, text=instructions, wraplength="450")
        self.info_instructions.grid(row=1, padx=5, pady=5)

        self.dismiss_button = Button(self.info_frame, text="Dismiss", fg="#FFFFFF", bg="#008CFF", font=("Arial 12 bold"), width="12", command=partial(self.dismiss_info, partner))
        self.dismiss_button.grid(row=2, padx=5, pady=5)

    # closes info dialogue (used by button and x at top of dialogue)
    def dismiss_info(self, partner):
        # Put info button back to normal...
        partner.to_info_button.config(state=NORMAL)
        self.info_box.destroy()


class History_export:
    """This GUI shows all valid conversions from start of the 
    programme and gives user choice to export the conversions in a
    .txt file. When History/Export GUI is open, to_info button in 
    Converter is disabled
    """

    def __init__(self, partner):

        # Initialising string variable for past conversions
        self.display_string = ""

        # common format for Export and Dismiss buttons 
        # Arial size 14 bold, with white text, blue background, 
        # button width 12 char, allround padding 5px
        btn_font = ("Arial 12 bold")
        btn_fg = "#FFFFFF"
        btn_bg = "#008CFF"
        btn_width = "12"
        padx_num = 5
        pady_num = 5

        # set up dialogue box
        self.history_export_box = Toplevel()
        self.history_export_box.title("History / Export")

        # disable history button
        partner.to_history_button.config(state=DISABLED)

        # If users press cross at top, closes history GUI and 
        # enables history button in main GUI
        self.history_export_box.protocol("WM_DELETE_WINDOW", partial(self.dismiss_history, partner))

        # set up History GUI Frame and Export Frame to
        # separate two sections for better code structure
        self.history_frame = Frame(self.history_export_box, width=300, height=200, padx=5, pady=5)
        self.history_frame.grid(row=0)

        self.history_heading = Label(self.history_frame, text="History", font=("Arial 14 bold"))
        self.history_heading.grid(row=0, padx=5, pady=5)

        history_instructions = "Below are all your recent conversions, rounded to 1 d.p., ordered from oldest to newest"
        self.history_instructions = Label(self.history_frame, text=history_instructions, wraplength="300")
        self.history_instructions.grid(row=1, padx=5, pady=5)

        # Use Scrolledtext widget to display past conversions stored in Converter all_calculations list
        for item in partner.all_calculations:
            self.display_string += f"{item}\n"
        self.past_conversions = st.ScrolledText(self.history_frame, width=40, height=5)
        self.past_conversions.grid(row=2)

        #  Add text in Scrolledtext and make it read only
        self.past_conversions.insert(INSERT, self.display_string)
        self.past_conversions.configure(state ='disabled')

        self.export_frame = Frame(self.history_export_box, width=300, height=200)
        self.export_frame.grid(row=1, padx=5, pady=5)

        self.export_heading = Label(self.export_frame, text="Export", font=("Arial 14 bold"))
        self.export_heading.grid(row=0, padx=5, pady=5)

        export_instructions = "Either enter a custom file name and push <Export> button, or simply push <Export> to save all your recent temperature conversions in a .txt file"
        self.export_instructions = Label(self.export_frame, text=export_instructions, wraplength="300")
        self.export_instructions.grid(row=1, padx=5, pady=5)

        # set up input frame so columnspan parameter doesn't
        # have to be added for every other component in frame
        # as filename label and entrybox are in different columns
        self.input_frame = Frame(self.export_frame)
        self.input_frame.grid(row=2)

        self.filename_label = Label(self.input_frame, text="Enter file name:")
        self.filename_label.grid(row=0, column=0, padx=5, pady=5)

        self.filename_entry = Entry(self.input_frame, font=("Arial 12"), bg="white")
        self.filename_entry.grid(row=0, column=1, padx=5, pady=5)

        # Feedback message space for to show if filename is valid
        self.filename_feedback = Label(self.export_frame, font = "Arial 11 bold", wraplength=350, height=3)
        self.filename_feedback.grid(row=3)

        # set up separate frame for export and dismiss buttons
        self.button_frame = Frame (self.history_export_box)
        self.button_frame.grid(row=2, padx=5, pady=10)

        self.dismiss_button = Button(self.button_frame, text="Dismiss", fg=btn_fg, bg=btn_bg, font=btn_font, width=btn_width, command=partial(self.dismiss_history, partner))
        self.dismiss_button.grid(row=0, column=0)

        self.export_button = Button(self.button_frame, text="Export", fg=btn_fg, bg=btn_bg, font=btn_font, width=btn_width, command=self.filename_making_exporting)
        self.export_button.grid(row=0, column=1)

    # if filename is blank, returns default name with date
    # Otherwise checks filename and either returns
    # an error. If filename is valid, export past conversions
    # using filename
    def filename_making_exporting(self):
        filename = self.filename_entry.get()

        # creates default filename
        # (DD_ MM_YYYY_temperature_calculations)
        if filename == "":

            # set filename_ok to "" so we can see
            # default name for testing purposes
            filename_ok = ""
            date_part = self.get_date()
            filename = f"{date_part}_temperature_calculations"

        # checks filename has only a-z / A-Z /  0-9 / underscores
        else:
            filename_ok = self.check_filename(filename)

        if filename_ok == "":
            # write file down with valid filename (with added .txt tail)
            # and configure error msg label as successful, with 
            # filename included for easier access to file
            filename += ".txt"
            with open(f"{filename}", "w") as f:
                f.write(self.display_string)
            self.filename_feedback.config(fg= "#004C00", text="File exported successfully as {}".format(filename))

        else:
            # configure error msg label to inform invalid filename
            self.filename_feedback.config(fg="#FF0000", text=filename_ok)

    # retrieves date and creates DD_MM_YYYY string
    def get_date(self):
        today = date.today()

        day = today.strftime("%d")
        month = today.strftime("%m")
        year = today.strftime("%Y")

        return f"{day}_{month}_{year}"
  
    # checks that filename only contains letters,
    # numbers and underscores. Returns either "" if
    # OK or the problem if we have an error
    def check_filename(self, filename):
        problem = ""

        # Regular expression to check filename is valid
        valid_char = "[A-Za-z0-9_]"

        # iterates through filename and checks each letter
        for letter in filename:
            if re.match (valid_char, letter):
                continue

            elif letter == " ":
                problem = "Sorry, no spaces allowed"

            else:
                problem = f"Sorry, no {letter} is allowed"
            break

        if problem != "":
            problem += ". Use letters / numbers / underscores only."

        return problem

    # closes history dialogue (used by button and x at top of dialogue)
    def dismiss_history(self, partner):
        # Put history button back to normal...
        partner.to_history_button.config(state=NORMAL)
        self.history_export_box.destroy()

# main routine
if __name__ == "__main__":
    # set up main GUI as root with title and size/geometry.
    # Then run programme
    root = Tk()
    root.title("Temperature Converter")
    root.geometry("375x350")
    root.resizable(0, 0)
    Converter()
    root.mainloop()
